---
title: Abordagens composicionais
---

Neste capítulo discutiremos uma das mais interessantes e promissoras ramificações do Projeto MPB: a composição assistida. Em termos bem sucintos, compor dentro sistema se dá através uma lógica em "engenharia reversa", ou seja, tomando como base dados estatísticos compilados do processo de análise dos *corpora*. Importante frisar que não se trata de *composição algorítmica* (pelo menos em seu sentido mais conhecido), ou seja, um processo automatizado (ou semiautomatizado). Na verdade, poderíamos pensar que o sistema atuaria -- em estágios específicos do processo composicional -- apenas como um *fornecedor* de um espectro alternativas estatisticamente embasadas em relações a aspectos estruturais previamente mapeados (associados a alturas, ritmo e/ou harmonia) nas análises dos *corpora*. Assim, o(a) compositor(a) mantém sempre suas prerrogativas para tomar decisões e fazer o que entende como as melhores escolhas dentre as opções disponíveis a cada momento, conectando-las de modo lógico e criativo a uma estrutura imaginada para sua obra (o que não deixa de ser uma possível definição para o ato de compor).

Em outros termos, a composição dentro desse sistema não é, de modo algum, regida pelo determinismo, já que encontra a cada etapa uma considerável margem de flexibilidade. Isso pode ser constatado nos três principais eixos musicais alimentados pelos dados analíticos, a saber, harmonia, melodia e ritmo, como se segue: 

**Flexibilidade harmônica** -- as sequências de acordes geradas pelo algoritmo-compositor específico (ver mais à frente) são desvinculadas de quaisquer referências a posições métricas e durações. 

**Flexibilidade melódica** -- as sequências de c-letras, ou seja, as *c-palavras* geradas pelo algoritmo-compositor específico (ver mais à frente) indicam apenas "gestos de contorno" básicos, que podem ser realizados de modos consideravelmente distintos.

**Flexibilidade rítmica** -- as sequências de r-letras, ou seja, as *r-palavras* geradas pelo algoritmo-compositor específico (ver mais à frente) são "agnósticas" em relação à métrica, o que significa que devem ser consideradas como unidades autônomas que podem ser posicionadas metricamente a critério do(a) compositor(a). Isso inclui também a liberdade de poder distanciar livremente unidades contíguas. 

**Flexibilidade de conexões** -- as *c/r palavras* (isto é, a conjunção de c- e r-palavras) devem ser vistas como unidades autônomas, sem relações mútuas de conexão.^[Isso significa que são irrelevantes tanto as distâncias temporais entre o último ataque de uma determinada c/r palavra e o primeiro da c/r palavra seguinte, quanto os intervalos melódicos entre esses dois pontos de articulação.]

---

### ALGORITMOS-COMPOSITORES
Em sua versão atual, o processo composicional dentro do sistema é baseado em três algoritmos-compositores, cada qual associado a um domínio estrutural-musical, a saber, harmonia, ritmo e alturas. Os três algoritmos são alimentados por dados estatísticos referentes a transições entre eventos contíguos, registrados nas *matrizes de transição probabilística*^[Ver capítulo sobre processos markovianos] dos 10 *corpora* analisados. De um modo geral, os algoritmos operam da seguinte maneira: o usuário informa o *corpus* de referência, o evento-semente (que, dependendo do domínio selecionado, pode ser uma categoria funcional, uma r-letra ou uma c-letra) e o número de iterações desejado. O algoritmo então retorna uma estrutura completa (uma sequência de acordes, uma r-palavra ou uma c-palavra) que guarda -- ao menos em termos probabilísticos -- estreitos vínculos com o *corpus* selecionado.

Um simples exemplo ilustrará a lógica básica por trás do funcionamento dos três algoritmos. Considere uma matriz de transição probabilística com apenas quatro estados -- w, x, y, z -- e suas respectivas probabilidades de transição computadas ([@fig-comp00]). Assumamos agora que desejamos gerar uma sequência de três símbolos a partir da "semente" y, através da lógica básica dos algoritmos-compositores. Isso significa que precisaremos aplicar duas iterações (já que a "semente" y será o primeiro símbolo da sequência). Na primeira iteração, o algoritmo faz um sorteio *ponderado* das probabilidades de transição referentes à linha "y".^[Isto é, os valores maiores de probabilidade terão maior "chance" de serem escolhidos do que os menores. Contudo, isso *não* significa que uma probabilidade maior *sempre* será selecionada. Eventualmente, "supresas" nesse sentido podem ocorrer, o que é saudável para os propósitos composicionais e evita o determinismo do processo, algo que seria bastante indesejável em termos musicais.] A transição escolhida ("x" no exemplo) se torna a nova "semente" para uma reaplicação do algoritmo, que retorna desta vez "z", completando a extensão previamente estabelecida de três símbolos para a sequência (evidentemente, o processo poderia se estender indefinidamente, a depender do número de iterações desejado). 

![Exemplo simplifficado da lógica dos algoritmos-compositores.](../figs/composição-00.png){width=75% #fig-comp00}

Os algoritomos-compositores empregados no sistema são descritos sucintamente a seguir:

(1) *corporaKov2.py* -- código implementado em linguagem Python, recebe como *input* informações sobre o *corpus* considerado, o "acorde-semente"^[Ou seja, uma categoria funcional a partir da qual o usuário pretende construir uma sequência harmônica] e o número de iterações desejado (ou seja, a extensão da sequência). O algoritmo retorna a sequência em três versões: (a) em categorias funcionais; (b) em cifras alfanuméricas e (c) em notação genealógica (ver glossário), como tipos acordais registrados no modelo GTA (ver capítulo sobre os modelos teóricos adotados no projeto). A [@fig-comp01] apresenta o fluxograma referente ao algoritmo e um exemplo de sua aplicação.

![Esquema básico do algoritmo *corparoKov2.py* e um exemplo.](../figs/composição-01.png){width=75% #fig-comp01}

(2) *corporaKov_ritmo.py* --  código implementado em linguagem Python, recebe como *input* informações sobre o *corpus* considerado, a "r-letra-semente" (análoga à ideia do "acorde-semente) e o número de iterações desejado (ou seja, a extensão da sequência em número de r-letras). O algoritmo retorna como *output* uma r-palavra original (e probabilisticamente vinculada ao *corpus* em questão), juntamente com sua *cardinalidade* # (neste caso, o número total de ataques da r-palavra). A [@fig-comp02] apresenta o fluxograma referente ao algoritmo e um exemplo de sua aplicação.

![Esquema básico do algoritmo *corparoKov_ritmo.py* e um exemplo.](../figs/composição-02.png){width=60% #fig-comp02}

(3) *corporaKov_contorno.py* -- código implementado em linguagem Python, recebe como *input* informações sobre o *corpus* considerado, a "c-letra-semente" e a cardinalidade (que deverá coerente à cardinalidade de uma r-palavra correspondente, previamente construída). A [@fig-comp03] apresenta o fluxograma referente ao algoritmo e um exemplo de sua aplicação.


![Esquema básico do algoritmo *corparoKov_contorno.py* e um exemplo.](../figs/composição-03.png){width=60% #fig-comp03}

---

### ESTRATÉGIAS COMPOSICIONAIS

Até o presente momento, duas estratégias de composição assistida dentro do sistema foram idealizadas, descritas sucintamente como se segue:

**Estratégia 1** -- é a que mais se utiliza dos dados estatísticos analisados. Sua principal limitação é ausência de controle para construções de estruturas relativamente complexas. Assim, é idealmente empregada em composições aforísticas, ou seja de curta duração.^[Recentente, a composição com essa estratégia foi usada como atividade de avaliação para os alunos de uma disciplina da grade do Pós-Graduação em Música da UFRJ, ministrada por Carlos Almada, Hugo Carvalho e Cecília Saraiva. Os resultados foram extremamente satisfatórios.]
Um possível protocolo composicional com essa estratégia é descrito a seguir (imaginamos que outras possibilidades possam ser eventualmente propostas):

(1) Selecionar o *corpus* de interesse (seja, por exemplo, JOBIM).

(2) Determinar o número de c/r palavras que formará a peça a ser composta (consideremos, como uma breve ilustração, que a peça de nosso exemplo terá cinco c/r palavras).

(3) Usar o algoritmo-compositor *corporaKov_ritmo.py* para gerar (cinco, no caso do exemplo) r-palavras.^[Vale aqui trazer uma observação importante: o usuário pode, claro, descartar as r-palavras que considerar inadequadas para sua peça e rodar o algoritmo quantas vezes forem necessárias, tendo em vista, claro, a qualidade do produto musical que se pretende criar. Ou seja, podemos acrescentar esta possibilidade às quatro flexibilizações acima apresentadas.] A [@fig-comp04] esquematiza a produção das cinco r-palavras, a partir da aplicação sequencial do algoritmo, considerando as r-letras {g, n, e, g, o} e os respectivos números de iterações {3, 2, 4, 3, 2}.

![Exemplo de aplicação da Estratégia 1: geração de cinco r-palavras no *corpus* JOBIM.](../figs/composição-04.png){width=80% #fig-comp04}

(4) "Montar" as r-palavras na sequência do processo gerativo, distanciando-as livremente, fornecendo assim uma espécie de "esqueleto" rítmico-métrico para a composição.^[O que inclui determinar a fórmula de compasso para a peça.] Em outros termos, as r-palavras devem ser vistas como blocos autônomos que podem ser posicionados metricamente a critério do usuário (sugere-se apenas evitar sobreposições ou elisões, de modo que a estrutura dos segmentos fique evidente). Obtem-se assim, em termos bem básicos, a estrutura formal da peça, cuja principal implicação é a definição do seu número de compassos. A [@fig-comp05] propõe uma possível montagem das cinco r-palavras geradas no exemplo, resultando numa extensão total de sete compassos para a peça planejada.

![Exemplo de aplicação da Estratégia 1: posicionamento métrico das cinco r-palavras.](../figs/composição-05.png){width=60% #fig-comp05}

(5) Usar o algoritmo-compositor *corporaKov_contorno.py* para gerar c-palavras devidamente *compatíveis em cardinalidade* em relação às r-palavras previamente geradas (a mesma observação feita em (3) sobre a seleção de resultados aplica-se aqui). Como a estrutura métrica da peça foi definida na etapa (4), as c-palavras geradas se integram automaticamente àquelas, formando assim c/r palavras.

![Exemplo de aplicação da Estratégia 1: geração de cinco c-palavras no *corpus* JOBIM.](../figs/composição-06.png){width=60% #fig-comp06}

(6) Definir o ritmo harmônico desejado para a peça, o que será dependente do número de compassos previamente estabelecido em (4). Consequentemente, o número de acordes da estrutura harmônica é definido. Por simplicidade, consideremos no nosso exemplo um acorde por compasso, totalizando assim sete.

(7) Usar o algoritmo-compositor *corporaKov2.py* para gerar a sequência de acordes (em seis iterações, no exemplo) que formará a estrutura harmônica da peça. Como nos outros casos, o usuário poderá fazer diversas tentativas até encontrar a sequência que mais lhe agrade. ^[Uma possível alternativa a esta etapa (em caso de grandes sequências, com 10 ou mais acordes) poderia ser subdividir o número total de acordes a se gerar em segmentos de menor extensão -- como "frases harmônicas" -- de maneira a se ter mais controle sobre as relações de coerência e, assim, favorecer uma melhor adaptação da harmonia criada às intenções composicionais] A [@fig-comp07] apresenta uma sequência harmônica gerada e selecionada para a peça do exemplo.

![Exemplo de aplicação da Estratégia 1: geração de uma sequência de cinco acordes no *corpus* JOBIM..](../figs/composição-07.png){width=80% #fig-comp07}

(8) Tomando as c-letras de cada c/r palavra como guia e mantendo uma coerência com o(s) acorde(s) que a sustenta(m), definir as alturas da linha melódica. Uma das muitas alternativas possíveis é proposta na [@fig-comp08]. 

![Exemplo de aplicação da Estratégia 1: geração de uma possível linha melódica a partir dos dados pré-estabelecidos.](../figs/composição-08.png){width=80% #fig-comp08}

(9) Fazer, se necessário, pequenos ajustes na melodia composta, tais como: substituição de pausas por notas sustentadas (ou vice-versa), incluir ornamentos (ou mesmo breves conexões melódicas), trocas de registros em c-palavras etc.^[Uma etapa adicional -- optativa, claro -- poderia ser a criação de um arranjo (ou seja, uma *concretização*) da melodia harmonizada. Assim, a alternância de texturas diversas, a inclusão de linhas secundárias, de dinâmica, sinais de agógica e expressão etc. podem ser acionados em prol de um resultado esteticamente mais próximo de uma composição "convencional".] 

----

**Estratégia 2** --



